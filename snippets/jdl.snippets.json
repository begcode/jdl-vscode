{
    "Application Configuration": {
        "prefix": "add application",
        "body": [
            "/**",
            " * 应用配置",
            " */",
            "application {",
            "\tconfig {",
            "\t\t$1",
	        "\t}",
            "}"
        ],
        "description": "创建应用配置"
    },
    "Deployment Configuration": {
        "prefix": "add deployment",
        "body": [
            "/**",
            " * The deployment configuration.",
            " * @author ${author:A true hipster}",
            " */",
            "deployment {",
            "\t$1",
            "}"
        ],
        "description": "创建部署配置"
    },
    "New Entity": {
        "prefix": "add entity",
        "body": [
            "/**",
            " * ${1}",
            " */",
            "entity ${2:Entity} {",
            "\t${3:fieldName} ${4|String, Integer, Long, BigDecimal, Float, Double, Boolean, Date, LocalDate, ZonedDateTime, Instant, Blob, AnyBlob, ImageBlob, TextBlob |} /** ${0} */",
            "}"
        ],
        "description": "创建实体"
    },
    "New Field": {
        "prefix": "add field",
        "body": [
            "${1:fieldName} ${2|String, Integer, Long, BigDecimal, Float, Double, Boolean, Date, LocalDate, ZonedDateTime, Instant, Blob, AnyBlob, ImageBlob, TextBlob |} /** ${3} */${0}"
       	],
        "description": "创建字段"
    },
    "OneToOne Relationship": {
        "prefix": "relationship OneToOne",
        "body": [
            "/**",
            " * 一对一关联 ",
            " */",
            "relationship OneToOne {",
	            "\t${1:Entity1} to ${2:Entity2}",
            "}"
        ],
        "description": "一对一关联关系"
    },
    "OneToMany Relationship": {
        "prefix": "relationship OneToMany",
        "body": [
            "/**",
            " * 一对多关联 ",
            " */",
            "relationship OneToMany {",
	            "\t${1:Entity1} to ${2:Entity2}",
            "}"
        ],
        "description": "一对多关联关系"
    },
    "ManyToOne relationship": {
        "prefix": "relationship ManyToOne",
        "body": [
            "/**",
            " * 多对一关联 ",
            " */",
            "relationship ManyToOne {",
	            "\t${1:Entity1} to ${2:Entity2}",
            "}"
        ],
        "description": "多对一关联关系"
    },
    "ManyToMany relationship": {
        "prefix": "relationship ManyToMany",
        "body": [
            "/**",
            " * 多对多关联 ",
            " */",
            "relationship ManyToMany {",
	            "\t${1:Entity1} to ${2:Entity2}",
            "}"
        ],
        "description": "多对多关联关系"
    },
    "Paginate entities with standard pagination": {
        "prefix": "add paginate-with-pagination",
        "body": [
            "paginate ${0:*} with pagination"
        ]
    },
    "Paginate entities with a pager": {
        "prefix": "add paginate-with-pager",
        "body": [
            "paginate ${0:*} with pager"
        ]
    },
    "Paginate entities with an infinite scroll": {
        "prefix": "add paginate-with-infinite-scroll",
        "body": [
            "paginate ${0:*} with infinite-scroll"
        ]
    },
    "DTOs to Entities": {
        "prefix": "add dto-entities",
        "body": [
            "dto ${0:*} with mapstruct"
        ]
    },
    "Use serviceClass": {
        "prefix": "add service-serviceClass",
        "body": [
            "service ${0:*} with serviceClass"
        ]
    },
    "Use serviceImpl": {
        "prefix": "add service-serviceImpl",
        "body": [
            "service ${0:*} with serviceImpl"
        ]
    },
    "Search Entities": {
        "prefix": "add search-entities",
        "body": [
            "search ${0:*} with elasticsearch"
        ]
    },
    "Microservice with Entities": {
        "prefix": "add microservice-entities",
        "body": [
            "microservice ${1:*} with ${0:microserviceName}"
        ]
    },
    "AngularJS with Entities": {
        "prefix": "add angularSuffix-entities",
        "body": [
            "angularSuffix ${1:*} with ${2:suffix}"
        ]
    },
    "Skip Client for Entities": {
        "prefix": "add skipClient-entities",
        "body": [
            "skipClient for ${0:*}"
        ]
    },
    "Skip Server for Entities": {
        "prefix": "add skipServer-entities",
        "body": [
            "skipServer for ${0:*}"
        ]
    },
    "noFluentMethod in Entities": {
        "prefix": "add noFluentMethod-entities",
        "body": [
            "noFluentMethod for ${0:*}"
        ]
    },
    "Add ModuleName(BegCode)": {
        "prefix": "@ModuleName",
        "body": [
            "@ModuleName(${1})${0}"
        ],
        "description": "指定模块名称"
    },
    "Skip Website(BegCode)": {
        "prefix": "@SkipWebsite",
        "body": [
            "@SkipWebsite"
        ],
        "description": "忽略生成网站文件(html)"
    },
    "Add AnnotationOnSource(BegCode)": {
        "prefix": "@AnnotationOnSource",
        "body": [
            "@AnnotationOnSource(${1})${0}"
        ],
        "description": "关联关系左侧注解, 多个使用-分隔"
    },
    "Add AnnotationOnDestination(BegCode)": {
        "prefix": "@AnnotationOnDestination",
        "body": [
            "@AnnotationOnDestination(${1})${0}"
        ],
        "description": "关联关系右侧注解, 多个使用-分隔"
    },
    "OnUpdate with Relationship To(JHipster)": {
        "prefix": "@OnUpdate",
        "body": [
            "@OnUpdate(\"${1|NO ACTION, RESTRICT, CASCADE, SET NULL, SET DEFAULT |}\")${0}"
        ],
        "description": "级联更新处理方式"
    },
    "OnDelete with Relationship To(JHipster)": {
        "prefix": "@OnDelete",
        "body": [
            "@OnDelete(\"${1|NO ACTION, RESTRICT, CASCADE, SET NULL, SET DEFAULT |}\")${0}"
        ],
        "description": "级联删除处理方式"
    },
    "CollectId From(BegCode)": {
        "prefix": "@CollectIdByRelationFrom",
        "body": [
            "@CollectIdByRelationFrom(${1})${0}"
        ],
        "description": "关联关系ID收集"
    },
    "Generate SearchLayer(JHipster)": {
        "prefix": "@EntitySearchLayer",
        "body": [
            "@EntitySearchLayer(${1|true, false |})${0}"
        ],
        "description": "生成全文检索层文件(JHipster原生支持)"
    },
    "Add ReadPreAuthorize with Entity(JHipster)": {
        "prefix": "@EntitySpringReadPreAuthorize",
        "body": [
            "@EntitySpringReadPreAuthorize(\"${1}\")${0}"
        ],
        "description": "增加Read权限注解"
    },
    "Add PreAuthorize with Entity(JHipster)": {
        "prefix": "@EntitySpringPreAuthorize",
        "body": [
            "@EntitySpringPreAuthorize(\"${1}\")${0}"
        ],
        "description": "增加权限注解"
    },
    "Generate RestLayer(JHipster)": {
        "prefix": "@EntityRestLayer",
        "body": [
            "@EntityRestLayer(${1:true|false})${0}"
        ],
        "description": "生成Rest层文件"
    },
    "Generate PersistenceLayer(JHipster)": {
        "prefix": "@EntityPersistenceLayer",
        "body": [
            "@EntityPersistenceLayer(${1|true, false |})${0}"
        ],
        "description": "生成Persistence层文件"
    },
    "Generate DomainLayer(JHipster)": {
        "prefix": "@EntityDomainLayer",
        "body": [
            "@EntityDomainLayer(${1|true, false |})${0}"
        ],
        "description": "生成Demain层文件"
    },
    "Add updateByIdWithXXX Method(BegCode)": {
        "prefix": "@UpdateByIdWith",
        "body": [
            "@UpdateByIdWith${1}(${2})${0}"
        ],
        "description": "增加updateByIdWithXXX方法,参数为相应的字段"
    },
    "Add updateByXXX Method(BegCode)": {
        "prefix": "@UpdateBy",
        "body": [
            "@UpdateByIdWith${1}(${2},${3})${0}"
        ],
        "description": "增加updateByXXX方法,前部分参数为更新条件，后部分参数为更新字段"
    },
    "Add removeByXXX Method(BegCode)": {
        "prefix": "@RemoveBy",
        "body": [
            "@RemoveBy${1}(${2})${0}"
        ],
        "description": "增加removeByXXX方法,参数为条件字段"
    },
    "Add saveWithXXX Method(BegCode)": {
        "prefix": "@saveWith",
        "body": [
            "@saveWith${1}(${2})${0}"
        ],
        "description": "增加saveWithXXX方法,参数为保存数据的字段"
    }
}
